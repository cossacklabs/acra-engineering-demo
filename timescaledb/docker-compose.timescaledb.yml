version: "3"

services:
    # Creating keys:
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_server
    # - ./.acrakeys/acra-connector/${ACRA_CLIENT_ID}_server.pub
    acra-keymaker_server:
        # You can specify a docker image tag in the ACRA_DOCKER_IMAGE_TAG
        # environment variable or run the default 'latest' images
        image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        # We do not need a network to generate keys at all
        network_mode: "none"
        environment:
            # INSECURE!!! You MUST define your own ACRA_SERVER_MASTER_KEY and ACRA_CONNECTOR_MASTER_KEY
            # The default is for testing purposes only
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
        volumes:
            # Mount the whole ./.acrakeys directory to be able to generate keys
            # and place them in service subdirectories
            - ./.acrakeys:/keys
        # Please specify ACRA_CLIENT_ID environment variable, otherwise it will
        # be started with the default 'testclientid' client id
        command: >-
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --generate_acraserver_keys
            --keys_output_dir=/keys/acra-server
            --keys_public_output_dir=/keys/acra-connector
    # Creating keys:
    # - ./.acrakeys/acra-connector/${ACRA_CLIENT_ID}
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}.pub
    acra-keymaker_connector:
        image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_CONNECTOR_MASTER_KEY:-MElBVnhEeTd3b29JMFVVcnhGMXJPT3BxZUVwWW5wS3E=}
        volumes:
            - ./.acrakeys:/keys
        command: >-
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --generate_acraconnector_keys
            --keys_output_dir=/keys/acra-connector
            --keys_public_output_dir=/keys/acra-server
    # Creating keys:
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_storage
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_storage.pub
    # Both keys must be accessible by AcraServer in tranparent mode
    acra-keymaker_writer:
        image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
        volumes:
            - ./.acrakeys:/keys
        command: >-
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --generate_acrawriter_keys
            --keys_output_dir=/keys/acra-server
            --keys_public_output_dir=/keys/acra-server


    timescaledb:
        image: timescale/timescaledb:latest-pg11
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        ports:
            - "5432:5432"
        networks:
            - server-timescaledb
            - postgresqlweb-timescaledb
            - world


    acra-server:
        image: "cossacklabs/acra-server:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        # Restart server after correct termination, for example after the config
        # was changed through the API
        restart: always
        depends_on:
            - acra-keymaker_server
            - acra-keymaker_connector
            - acra-keymaker_writer
            - timescaledb
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
        # We use internal networks:
        # - 'server-timescaledb' - for AcraServer and DB interconnection
        # - 'connector-server' - for AcraServer and AcraConnector interconnection
        networks:
            - server-timescaledb
            - connector-server
        volumes:
            # Mount the directory with only the keys for this service. Must be
            # rewriteable in case of using API, otherwise should be read-only.
            - ./.acrakeys/acra-server:/keys
            # Directory with configuration, rewriteable
            - ./acra-server-configs:/configs
        command: >-
            --db_host=timescaledb
            --db_port=5432
            --keys_dir=/keys
            --auth_keys=/keys/httpauth.accounts
            --http_api_enable
            --incoming_connection_api_string=tcp://0.0.0.0:9090
            --config_file=/configs/acra-server.yaml
            --encryptor_config_file=/configs/encryptor_config.yaml
            --incoming_connection_prometheus_metrics_string=tcp://0.0.0.0:9399
            -v


    acra-connector:
        image: "cossacklabs/acra-connector:${ACRA_DOCKER_IMAGE_TAG:-latest}"
        restart: always
        depends_on:
            - acra-keymaker_server
            - acra-keymaker_connector
            - acra-server
        # Open the port outside only for demonstration purposes only
        # (connections between containers are performing within isolated
        # networks)
        ports:
            - "9494:9494"
        environment:
            ACRA_MASTER_KEY: ${ACRA_CONNECTOR_MASTER_KEY:-MElBVnhEeTd3b29JMFVVcnhGMXJPT3BxZUVwWW5wS3E=}
        # We use internal networks:
        # - 'connector-server' - for interconnection with AcraServer
        # - 'webconfig-connector' - for interconnection with AcraWebconfig
        # and external network 'world' for port exposing
        networks:
            - connector-server
            - grafana-connector
            - metricsource-connector
            - world
        volumes:
            # Mount the directory with only the keys for this service
            - ./.acrakeys/acra-connector:/keys:ro
        command: >-
            --acraserver_connection_host=acra-server
            --keys_dir=/keys
            --client_id=${ACRA_CLIENT_ID:-testclientid}
            --incoming_connection_string=tcp://0.0.0.0:9494
            --http_api_enable
            --incoming_connection_api_string=tcp://0.0.0.0:9191
            --incoming_connection_prometheus_metrics_string=tcp://0.0.0.0:9499
            -v


    metricsource:
        depends_on:
            - acra-connector
        build:
            context: ../timescaledb/
            dockerfile: metricsource.dockerfile
        environment:
            POSTGRES_HOST: acra-connector
            POSTGRES_PORT: 9494
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        networks:
            - metricsource-connector


    prometheus:
        image: prom/prometheus:v2.4.0
        depends_on:
            - acra-server
            - acra-connector
        ports:
            - "9090:9090"
        volumes:
            - ../_common/prometheus:/app.cfg
        networks:
            - connector-server
            - grafana-prometheus
            - world
        command: >-
            --config.file=/app.cfg/prometheus.yml
            --storage.tsdb.path=/prometheus
            --web.console.libraries=/usr/share/prometheus/console_libraries
            --web.console.templates=/usr/share/prometheus/consoles


    postgresqlweb:
        depends_on:
            - timescaledb
        build:
            context: ../_common/pgadmin/
            dockerfile: pgadmin.dockerfile
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-test@test.test}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-test}
            POSTGRES_HOST: timescaledb
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        ports:
            - "8008:80"
        networks:
            - postgresqlweb-timescaledb
            - world


    grafana:
        image: grafana/grafana:5.4.3
        depends_on:
            - acra-connector
        environment:
            GF_AUTH_ANONYMOUS_ENABLED: !!str 'true'
            GF_PATHS_PROVISIONING: '/app.cfg/provisioning'
        ports:
            - "3000:3000"
        volumes:
            - ./grafana:/app.cfg
        networks:
            - grafana-connector
            - grafana-prometheus
            - world


networks:
    world:
    server-timescaledb:
        internal: true
    connector-server:
        internal: true
    postgresqlweb-timescaledb:
        internal: true
    grafana-connector:
        internal: true
    metricsource-connector:
        internal: true
    grafana-prometheus:
        internal: true
