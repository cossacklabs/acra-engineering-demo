version: "3"

services:
    # Creating keys:
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_storage
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_storage.pub
    # Both keys must be accessible by AcraServer in tranparent mode
    acra-keymaker_client:
        image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-0.90.0}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
        volumes:
            - ./.acrakeys:/keys
            - ../_common/ssl/acra-client/acra-client.crt:/ssl/acra-client.crt
        command: >-
            --client_id=""
            --tls_cert=/ssl/acra-client.crt
            --generate_acrawriter_keys
            --keys_output_dir=/keys/acra-server
            --keys_public_output_dir=/keys/acra-server
            --keystore=v1

    timescaledb:
        # Build and run the container based on the official postgresql image
        # with an additional configuration in accordance with djangoproject
        # requirements
        build:
            context: ../
            dockerfile: _common/timescaledb/timescaledb.dockerfile
            args:
                VCS_URL: ${COSSACKLABS_ACRAENGDEMO_VCS_URL}
                VCS_REF: ${COSSACKLABS_ACRAENGDEMO_VCS_REF}
                VCS_BRANCH: ${COSSACKLABS_ACRAENGDEMO_VCS_BRANCH}
                BUILD_DATE: ${COSSACKLABS_ACRAENGDEMO_BUILD_DATE}
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        ports:
            - "5432:5432"
        networks:
            server-timescaledb:
              # re-use ssl/pgsql/postgresql.crt with dns name 'postgresql'
              aliases:
                - "postgresql"
            postgresqlweb-timescaledb:
                aliases:
                    - "postgresql"
            world:

    acra-server:
        image: "cossacklabs/acra-server:${ACRA_DOCKER_IMAGE_TAG:-0.90.0}"
        # Restart server after correct termination, for example after the config
        # was changed through the API
        restart: always
        depends_on:
            - acra-keymaker_client
            - timescaledb
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
            GODEBUG: "netdns=go"
        # We use internal networks:
        # - 'server-timescaledb' - for AcraServer and DB interconnection
        # - 'connector-server' - for AcraServer and AcraConnector interconnection
        networks:
            - server-timescaledb
            - metricsource-server
            - grafana-server
            - prometheus-server
        ports:
            - "9393:9393"
        volumes:
            # Mount the directory with only the keys for this service. Must be
            # rewriteable in case of using API, otherwise should be read-only.
            - ./.acrakeys/acra-server:/keys:ro
            # Directory with configuration, rewriteable
            - ./acra-server-configs:/configs
            - ../_common/ssl/acra-server/:/ssl
            - ../_common/ssl/root.crt:/ssl/root.crt
        command: >-
            --db_host=postgresql
            --db_port=5432
            --keys_dir=/keys
            --http_api_enable
            --incoming_connection_api_string=tcp://0.0.0.0:9090
            --incoming_connection_string=tcp://0.0.0.0:9393
            --config_file=/configs/acra-server.yaml
            --encryptor_config_file=/configs/encryptor_config.yaml
            --incoming_connection_prometheus_metrics_string=tcp://0.0.0.0:9399
            --tls_auth=4
            --tls_ca=/ssl/root.crt
            --tls_cert=/ssl/acra-server.crt
            --tls_key=/ssl/acra-server.key
            --tls_client_id_from_cert
            --tls_identifier_extractor_type=distinguished_name
            --acraconnector_transport_encryption_disable
            -v

    metricsource:
        depends_on:
            - acra-server
        build:
            context: ../
            dockerfile: timescaledb/metricsource.dockerfile
        environment:
            POSTGRES_HOST: acra-server
            POSTGRES_PORT: 9393
            POSTGRES_DB: ${POSTGRES_DB:-test}
        networks:
            - metricsource-server


    prometheus:
        image: prom/prometheus:v2.31.1
        depends_on:
            - acra-server
        ports:
            - "9090:9090"
        volumes:
            - ../_common/prometheus:/app.cfg
        networks:
            - prometheus-server
            - grafana-prometheus
            - world
        command: >-
            --config.file=/app.cfg/prometheus.yml
            --storage.tsdb.path=/prometheus
            --web.console.libraries=/usr/share/prometheus/console_libraries
            --web.console.templates=/usr/share/prometheus/consoles


    postgresqlweb:
        image: dpage/pgadmin4:6.2
        volumes:
            - ../_common/ssl/acra-client/:/ssl
            - ../_common/ssl/root.crt:/home/pgadmin/.postgresql/root.crt
            # actually, pgadmin ignore this file that defined in servers.json and require ~/.postgresql/root.crt
            # but we mount it to be consistent
            - ../_common/ssl/root.crt:/ssl/root.crt
            # place pre-configured file with settings to timescale
            # https://www.pgadmin.org/docs/pgadmin4/6.2/container_deployment.html
            - ../_common/pgadmin/servers.json:/pgadmin4/servers.json
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-test@test.test}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-test}
            POSTGRES_HOST: postgresql
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        ports:
            - "8008:80"
        depends_on:
            - timescaledb
        networks:
            - postgresqlweb-timescaledb
            - world

    grafana:
        image: grafana/grafana:8.3.0
        depends_on:
            - acra-server
        environment:
            GF_AUTH_ANONYMOUS_ENABLED: !!str 'true'
            GF_PATHS_PROVISIONING: '/app.cfg/provisioning'
        ports:
            - "3000:3000"
        volumes:
            - ./grafana:/app.cfg
        networks:
            - grafana-server
            - grafana-prometheus
            - world


networks:
    world:
    server-timescaledb:
        internal: true
    postgresqlweb-timescaledb:
        internal: true
    grafana-server:
        internal: true
    metricsource-server:
        internal: true
    prometheus-server:
        internal: true
    grafana-prometheus:
        internal: true
