version: "3"

volumes:
    acra-server:

services:
    # Creating keys:
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_storage
    # - ./.acrakeys/acra-writer/${ACRA_CLIENT_ID}_storage.pub
    acra-keymaker_client:
        image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-0.92.0}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
        volumes:
            - acra-server:/keys
            - ../_common/ssl/acra-client/:/ssl:ro
        command: >-
            --client_id=""
            --tls_cert=/ssl/acra-client.crt
            --keys_output_dir=/keys/acra-server
            --keys_public_output_dir=/keys/acra-server
            --keystore=v1

    mysql:
        # Build and run the container based on the official postgresql image
        # with an additional configuration in accordance with djangoproject
        # requirements
        build:
            context: ../
            dockerfile: _common/mysql-playground/mysql-playground.dockerfile
            args:
                VCS_URL: ${COSSACKLABS_ACRAENGDEMO_VCS_URL}
                VCS_REF: ${COSSACKLABS_ACRAENGDEMO_VCS_REF}
                VCS_BRANCH: ${COSSACKLABS_ACRAENGDEMO_VCS_BRANCH}
                BUILD_DATE: ${COSSACKLABS_ACRAENGDEMO_BUILD_DATE}
        # INSECURE!!! You MUST define your own DB name and credentials
        environment:
            # Admin user
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_USER: ${MYSQL_USER:-test}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD:-test}
            MYSQL_DATABASE: ${MYSQL_DATABASE:-test}
        # Open the port outside for demonstration purposes only (connections
        # between containers are performing within isolated networks)
        ports:
            - "3306:3306"
        # We use internal 'server-postgresql' network for AcraServer and
        # DB interconnection, 'postgresqlweb-postgresql' for interconnections
        # with web interface and external network 'world' for port exposing
        networks:
            - server-mysql
            - python-mysql
            - world
            - webui-mysql

    acra-server:
        image: "cossacklabs/acra-server:${ACRA_DOCKER_IMAGE_TAG:-0.92.0}"
        # Restart server after correct termination, for example after the config
        # was changed through the API
        restart: always
        depends_on:
            - acra-keymaker_client
            - mysql
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
            GODEBUG: "netdns=go"
        # We use internal networks:
        # - 'server-postgresql' - for AcraServer and DB interconnection
        # - 'python-server' - for AcraServer and PythonApp interconnection
        networks:
            - python-server
            - server-mysql
            - world
        ports:
            - "9393:9393"
        volumes:
            # Mount the directory with only the keys for this service. Must be
            # rewriteable in case of using API, otherwise should be read-only.
            #- keystore/acra-server:/keys
            - acra-server:/data
            # Directory with configuration, rewriteable
            - ./acra-server-config/acra-server.yaml:/config/acra-server.yaml
            - ../_common/ssl/acra-server/:/ssl
            - ../_common/ssl/ca/ca.crt:/ssl/root.crt
            - ../acra/examples/python/extended_encryptor_config_without_zone.yaml:/config/extended_encryptor_config_without_zone.yaml
            - ../acra/examples/python/extended_encryptor_config_with_zone.yaml:/config/extended_encryptor_config_with_zone.yaml
        command: >-
            --mysql_enable
            --db_host=mysql
            --db_port=3306
            --token_db=/data/token.db
            --keys_dir=/data/acra-server
            --http_api_enable
            --tls_auth=4
            --tls_ca=/ssl/root.crt
            --tls_cert=/ssl/acra-server.crt
            --tls_key=/ssl/acra-server.key
            --tls_client_id_from_cert
            --tls_identifier_extractor_type=distinguished_name
            --incoming_connection_api_string=tcp://0.0.0.0:9090
            --incoming_connection_string=tcp://0.0.0.0:9393
            -v
            --tls_ocsp_from_cert=ignore
            --tls_crl_from_cert=ignore
            --config_file=/config/acra-server.yaml
            --incoming_connection_prometheus_metrics_string=tcp://0.0.0.0:9399
            --tracing_jaeger_enable
            --jaeger_agent_endpoint=''
            --jaeger_collector_endpoint=http://jaeger:14268/api/traces

    python:
        depends_on:
            - acra-keymaker_client
        # Build and run container from source directory with demo django project
        build:
            context: ../
            dockerfile: ./python-mysql/python.dockerfile
            args:
                VCS_URL: ${COSSACKLABS_ACRA_VCS_URL}
                VCS_REF: ${COSSACKLABS_ACRA_VCS_REF}
                VCS_BRANCH: ${COSSACKLABS_ACRA_VCS_BRANCH}
                BUILD_DATE: ${COSSACKLABS_ACRAENGDEMO_BUILD_DATE}
        environment:
            EXAMPLE_HOST: acra-server
            EXAMPLE_PORT: 3306
            EXAMPLE_MYSQL: 'true'
            EXAMPLE_DB_USER: ${POSTGRES_USER:-test}
            EXAMPLE_DB_PASSWORD: ${POSTGRES_PASSWORD:-test}
            EXAMPLE_DB_NAME: ${POSTGRES_DB:-test}
            EXAMPLE_SSL_MODE: verify-full
            EXAMPLE_TLS_ROOT_CERT: /ssl/root.crt
            EXAMPLE_TLS_KEY: /ssl/acra-client.key
            EXAMPLE_TLS_CERT: /ssl/acra-client.crt
            EXAMPLE_ACRA_SERVER_API_ADDRESS: http://acra-server:9090
        # We use internal 'python-postgresql' network for Django and
        # DB interconnection, 'python-server' for access to AcraServer
        # and external network 'world' for port exposing
        networks:
            - python-server
            - python-mysql
        volumes:
            - ../acra/examples/python:/app

    phpmyadmin:
        build:
            context: ../
            dockerfile: ./_common/phpmyadmin/phpmyadmin.dockerfile
            args:
                VCS_URL: ${COSSACKLABS_ACRA_VCS_URL}
                VCS_REF: ${COSSACKLABS_ACRA_VCS_REF}
                VCS_BRANCH: ${COSSACKLABS_ACRA_VCS_BRANCH}
                BUILD_DATE: ${COSSACKLABS_ACRAENGDEMO_BUILD_DATE}
        networks:
            - webui-mysql
            - world
        depends_on:
            - mysql
        ports:
            - 8080:80
        environment:
            - PMA_ARBITRARY=1
            - PMA_HOST=mysql
            - PMA_USER=test
            - PMA_PASSWORD=test

    prometheus:
        image: prom/prometheus:v2.4.0
        depends_on:
            - acra-server
        ports:
            - "9090:9090"
        volumes:
            - ../_common/prometheus:/app.cfg
        networks:
            - python-server
            - world
        command: >-
            --config.file=/app.cfg/prometheus.yml
            --storage.tsdb.path=/prometheus
            --web.console.libraries=/usr/share/prometheus/console_libraries
            --web.console.templates=/usr/share/prometheus/consoles


    grafana:
        image: grafana/grafana:5.2.4
        depends_on:
            - prometheus
        environment:
            GF_AUTH_ANONYMOUS_ENABLED: !!str 'true'
            GF_PATHS_PROVISIONING: '/app.cfg/provisioning'
        ports:
            - "3000:3000"
        volumes:
            - ../_common/grafana:/app.cfg
        networks:
            - grafana-prometheus
            - world


    jaeger:
        image: jaegertracing/all-in-one:1.7
        environment:
            SPAN_STORAGE_TYPE: memory
        ports:
            - "16686:16686"
        networks:
            - python-server
            - world


networks:
    world:
    python-server:
        internal: true
    server-mysql:
        internal: true
    python-mysql:
        internal: true
    webui-mysql:
        internal: true
    grafana-prometheus:
        internal: true