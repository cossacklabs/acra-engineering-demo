version: "3"

services:
    # Creating keys:
    # - ./.acrakeys/acra-server/${ACRA_CLIENT_ID}_storage
    # - ./.acrakeys/acra-writer/${ACRA_CLIENT_ID}_storage.pub
    acra-keymaker_writer:
        image: "cossacklabs/acra-keymaker:${ACRA_DOCKER_IMAGE_TAG:-0.90.0}"
        network_mode: "none"
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
        volumes:
            - ./.acrakeys:/keys
            - ../_common/ssl/acra-client/:/ssl:ro
        command: >-
            --client_id=""
            --tls_cert=/ssl/acra-client.crt
            --generate_acrawriter_keys
            --keys_output_dir=/keys/acra-server
            --keys_public_output_dir=/keys/acra-writer
            --keystore=v1

    # Postgresql container
    postgresql:
        # Build and run the container based on the official postgresql image
        # with an additional configuration in accordance with djangoproject
        # requirements
        build:
            context: ../
            dockerfile: _common/pgsql-playground/pgsql-playground.dockerfile
            args:
                VCS_URL: ${COSSACKLABS_ACRAENGDEMO_VCS_URL}
                VCS_REF: ${COSSACKLABS_ACRAENGDEMO_VCS_REF}
                VCS_BRANCH: ${COSSACKLABS_ACRAENGDEMO_VCS_BRANCH}
                BUILD_DATE: ${COSSACKLABS_ACRAENGDEMO_BUILD_DATE}
        # INSECURE!!! You MUST define your own DB name and credentials
        environment:
            # Admin user
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        # Open the port outside for demonstration purposes only (connections
        # between containers are performing within isolated networks)
        ports:
            - "5432:5432"
        # We use internal 'server-postgresql' network for AcraServer and
        # DB interconnection, 'postgresqlweb-postgresql' for interconnections
        # with web interface and external network 'world' for port exposing
        networks:
            - server-postgresql
            - postgresqlweb-postgresql
            - world


    acra-server:
        image: "cossacklabs/acra-server:${ACRA_DOCKER_IMAGE_TAG:-0.90.0}"
        # Restart server after correct termination, for example after the config
        # was changed through the API
        restart: always
        depends_on:
            - acra-keymaker_writer
            - postgresql
            - jaeger
        environment:
            ACRA_MASTER_KEY: ${ACRA_SERVER_MASTER_KEY:-N0MyZEVCRGY1cHA4ODRSVHp3c3BNeGtDekxaV3BhTHI=}
            GODEBUG: "netdns=go"
        # We use internal networks:
        # - 'server-postgresql' - for AcraServer and DB interconnection
        # - 'rubygems-server' - for AcraServer and RUbyGems interconnection
        networks:
            - rubygems-server
            - server-postgresql
        volumes:
            # Mount the directory with only the keys for this service. Must be
            # rewriteable in case of using API, otherwise should be read-only.
            - ./.acrakeys/acra-server:/keys
            # Directory with configuration, rewriteable
            - ./.acraconfigs/acra-server:/config
            - ../_common/ssl/acra-server/:/ssl
            - ../_common/ssl/root.crt:/ssl/root.crt
        command: >-
            --db_host=postgresql
            --db_port=5432
            --keys_dir=/keys
            --http_api_enable
            --tls_auth=4
            --tls_ca=/ssl/root.crt
            --tls_cert=/ssl/acra-server.crt
            --tls_key=/ssl/acra-server.key
            --tls_client_id_from_cert
            --tls_identifier_extractor_type=distinguished_name
            --acraconnector_transport_encryption_disable
            --incoming_connection_api_string=tcp://0.0.0.0:9090
            --incoming_connection_prometheus_metrics_string=tcp://0.0.0.0:9399
            --config_file=/config/acra-server.yaml
            --tracing_jaeger_enable
            --jaeger_agent_endpoint=''
            --jaeger_collector_endpoint=http://jaeger:14268/api/traces
            -v
            -d


    rubygems:
        depends_on:
            - acra-keymaker_writer
            - memcached
            - elasticsearch
        # Build and run container from source directory with demo django project
        build:
            context: ../../
            dockerfile: ./acra-engineering-demo/rails/rails.dockerfile
            args:
                VCS_URL: ${COSSACKLABS_RUBYGEMS_VCS_URL}
                VCS_REF: ${COSSACKLABS_RUBYGEMS_VCS_REF}
                VCS_BRANCH: ${COSSACKLABS_RUBYGEMS_VCS_BRANCH}
                BUILD_DATE: ${COSSACKLABS_ACRAENGDEMO_BUILD_DATE}
        environment:
            ACRA_SERVER_HOST: acra-server
            ACRA_SERVER_PORT: 9393
            POSTGRES_HOST: postgresql
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
            PUBLIC_KEY_DIR: "/app.acrakeys"
            RUBYGEMS_VERSION: 3.1.5
            ELASTICSEARCH_URL: elasticsearch:9200
            MEMCACHED_ENDPOINT: memcached:11211
            TLS_CLIENT_KEY: /app/ssl/acra-client.key
            TLS_CLIENT_CERT: /app/ssl/acra-client.crt
            TLS_ROOT_CERT: /app/ssl/root.crt
        # Open http port
        ports:
            - "8000:3000"
        # We use internal 'rubygems-server' for access to AcraServer
        # and external network 'world' for port exposing
        networks:
            - rubygems-server
            - world
            - rubygems-elasticsearch
            - rubygems-memcached
        volumes:
            - ./.acrakeys/acra-writer:/app.acrakeys:ro
    memcached:
        image: memcached:1.4.24
        ports:
            - "11211:11211"
        networks:
            - rubygems-memcached
    elasticsearch:
        image: elasticsearch:6.8.13
        environment:
            - http.host=0.0.0.0
            - transport.host=127.0.0.1
            - xpack.security.enabled=false
        ports:
            - "9200:9200"
        networks:
            - rubygems-elasticsearch


    postgresqlweb:
        depends_on:
            - rubygems
        build:
            context: ../_common/pgadmin/
            dockerfile: pgadmin.dockerfile
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-test@test.test}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-test}
            POSTGRES_HOST: postgresql
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test}
            POSTGRES_DB: ${POSTGRES_DB:-test}
        ports:
            - "8008:80"
        networks:
            - postgresqlweb-postgresql
            - world


    prometheus:
        image: prom/prometheus:v2.4.0
        depends_on:
            - acra-server
        ports:
            - "9090:9090"
        volumes:
            - ../_common/prometheus:/app.cfg
        networks:
            - rubygems-server
            - world
        command: >-
            --config.file=/app.cfg/prometheus.yml
            --storage.tsdb.path=/prometheus
            --web.console.libraries=/usr/share/prometheus/console_libraries
            --web.console.templates=/usr/share/prometheus/consoles


    grafana:
        image: grafana/grafana:5.2.4
        depends_on:
            - prometheus
        environment:
            GF_AUTH_ANONYMOUS_ENABLED: !!str 'true'
            GF_PATHS_PROVISIONING: '/app.cfg/provisioning'
        ports:
            - "3000:3000"
        volumes:
            - ../_common/grafana:/app.cfg
        networks:
            - grafana-prometheus
            - world


    jaeger:
        image: jaegertracing/all-in-one:1.7
        environment:
            SPAN_STORAGE_TYPE: memory
        ports:
            - "16686:16686"
        networks:
            - rubygems-server
            - world


networks:
    world:
    rubygems-server:
        internal: true
    server-postgresql:
        internal: true
    postgresqlweb-postgresql:
        internal: true
    grafana-prometheus:
        internal: true
    rubygems-memcached:
        internal: true
    rubygems-elasticsearch:
        internal: true

